* ELPACA PACKAGE MANAGER


#+begin_src emacs-lisp
  (defvar elpaca-installer-version 0.4)
  (defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
  (defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
  (defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
  (defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
				:ref nil
				:files (:defaults (:exclude "extensions"))
				:build (:not elpaca--activate-package)))
  (let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
	 (build (expand-file-name "elpaca/" elpaca-builds-directory))
	 (order (cdr elpaca-order))
	 (default-directory repo))
    (add-to-list 'load-path (if (file-exists-p build) build repo))
    (unless (file-exists-p repo)
      (make-directory repo t)
      (when (< emacs-major-version 28) (require 'subr-x))
      (condition-case-unless-debug err
	  (if-let ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
		   ((zerop (call-process "git" nil buffer t "clone"
					 (plist-get order :repo) repo)))
		   ((zerop (call-process "git" nil buffer t "checkout"
					 (or (plist-get order :ref) "--"))))
		   (emacs (concat invocation-directory invocation-name))
		   ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
					 "--eval" "(byte-recompile-directory \".\" 0 'force)")))
		   ((require 'elpaca))
		   ((elpaca-generate-autoloads "elpaca" repo)))
	      (kill-buffer buffer)
	    (error "%s" (with-current-buffer buffer (buffer-string))))
	((error) (warn "%s" err) (delete-directory repo 'recursive))))
    (unless (require 'elpaca-autoloads nil t)
      (require 'elpaca)
      (elpaca-generate-autoloads "elpaca" repo)
      (load "./elpaca-autoloads")))
  (add-hook 'after-init-hook #'elpaca-process-queues)
  (elpaca `(,@elpaca-order))

#+end_src

* EVIL MODE
#+begin_src emacs-lisp
  ;; Install use-package support
(elpaca elpaca-use-package
  ;; Enable :elpaca use-package keyword.
  (elpaca-use-package-mode)
  ;; Assume :elpaca t unless otherwise specified.
  (setq elpaca-use-package-by-default t))

;; Block until current queue processed.
(elpaca-wait)

;;When installing a package which modifies a form used at the top-level
;;(e.g. a package which adds a use-package key word),
;;use `elpaca-wait' to block until that package has been installed/configured.
;;For example:
;;(use-package general :demand t)
;;(elpaca-wait)

;; Expands to: (elpaca evil (use-package evil :demand t))
(use-package evil
    :init      ;; tweak evil's configuration before loading it
    (setq evil-want-integration t) ;; This is optional since it's already set to t by default.
    (setq evil-want-keybinding nil)
    (setq evil-vsplit-window-right t)
    (setq evil-split-window-below t)
    (evil-mode))
  (use-package evil-tutor)

;;Turns off elpaca-use-package-mode current declartion
;;Note this will cause the declaration to be interpreted immediately (not deferred).
;;Useful for configuring built-in emacs features.
(use-package emacs :elpaca nil :config (setq ring-bell-function #'ignore))

;; Don't install anything. Defer execution of BODY
(elpaca nil (message "deferred"))
#+end_src

* GENERAL SETTINGS
#+begin_src emacs-lisp
(setq use-dialog-box nil)
(setq-default find-file-visit-truename nil)
(define-key minibuffer-local-map (kbd "C-v") 'yank)
(setq backup-directory-alist `(("." . "~/.saves")))

(setq-default indent-tabs-mode nil)
(setq-default tab-width 4)
(setq indent-line-function 'insert-tab)

(setq backup-directory-alist `(("." . "~/.saves")))

(setq browse-url-browser-function 'eww-browse-url)
#+end_src

* KEYBINDINGS
#+begin_src emacs-lisp
(use-package general
  :config
  (general-evil-setup)

  ;; set up 'SPC' as the global leader key
  (general-create-definer dt/leader-keys
    :states '(normal insert visual emacs)
    :keymaps 'override
    :prefix "SPC" ;; set leader
    :global-prefix "M-SPC") ;; access leader in insert mode

  (dt/leader-keys
    "SPC" '(counsel-M-x :wk "Counsel M-x")

    "TAB" '(tab-bar-switch-to-next-tab :wk "Window Right")
    "n" '(tab-bar-new-tab :wk "New Tab")
    "x" '(tab-bar-close-tab :wk "Quit Emacs (No Saves)")
    "q" '(delete-frame :wk "Quit Emacs (No Saves)")
    "." '(find-file :wk "Find file")
    "f c" '((lambda () (interactive) (find-file "~/.nixos-config/nixos/home-manager/emacs/config.org")) :wk "Edit emacs config")
    "f r" '(counsel-recentf :wk "Find recent files"))

  (dt/leader-keys
    "b" '(:ignore t :wk "buffer")
    "b b" '(switch-to-buffer :wk "Switch buffer")
    "b i" '(ibuffer :wk "Ibuffer")
    "b k" '(kill-this-buffer :wk "Kill this buffer")
    "b n" '(next-buffer :wk "Next buffer")
    "b p" '(previous-buffer :wk "Previous buffer")
    "b r" '(revert-buffer :wk "Reload buffer"))

  (dt/leader-keys
    "d" '(:ignore t :wk "Dired")
    "d d" '(dired :wk "Open dired")
    "d c" '(dired-create-empty-file :wk "Create File")
    "d a" '(dired-create-directory :wk "Create Directory")
    "d j" '(dired-jump :wk "Dired jump to current")
    "d n" '(neotree-dir :wk "Open directory in neotree")
    "d p" '(peep-dired :wk "Peep-dired"))

  (dt/leader-keys
    "r" '(:ignore t :wk "Misc Tools")
    "r f" '(:ignore t :wk "Elfeed")
    "r f f" '(elfeed :wk "Open Elfeed")
    "r f l" '(elfeed-goodies/show-link-hint :wk "Open Article Link")
    "r f u" '(elfeed-update :wk "Update Feed"))

  (dt/leader-keys
    "e" '(:ignore t :wk "Eshell/Evaluate")    
    "e b" '(eval-buffer :wk "Evaluate elisp in buffer")
    "e d" '(eval-defun :wk "Evaluate defun containing or after point")
    "e e" '(eval-expression :wk "Evaluate and elisp expression")
    "e h" '(counsel-esh-history :which-key "Eshell history")
    "e l" '(eval-last-sexp :wk "Evaluate elisp expression before point")
    "e r" '(eval-region :wk "Evaluate elisp in region"))

 (dt/leader-keys
    "h" '(:ignore t :wk "Help")
    "h f" '(describe-function :wk "Describe function")
    "h v" '(describe-variable :wk "Describe variable")
    ;;"h r r" '((lambda () (interactive) (load-file "~/.config/emacs/init.el")) :wk "Reload emacs config"))
    "h r r" '(reload-init-file :wk "Reload emacs config"))
(dt/leader-keys
  "m" '(:ignore t :wk "Org")
  "m j" '(org-babel-next-src-block :wk "Next Source Block")
  "m k" '(org-babel-previous-src-block :wk "Prev Source Block")
  "m a" '(org-agenda :wk "Org agenda")
  "m e" '(org-export-dispatch :wk "Org export dispatch")
  "m p" '(org-display-inline-images :wk "Org Display Images")
  "m i" '(org-toggle-item :wk "Org toggle item")
  "m t" '(org-todo :wk "Org todo")
  "m B" '(org-babel-tangle :wk "Org babel tangle")
  "m T" '(org-todo-list :wk "Org todo list")
  "m s" '(org-edit-src-code :wk "Edit Source Block")
  "m m" '(org-babel-execute-src-block :wk "Babel execute Block")
  "m n" '(org-babel-execute-buffer :wk "Babel execute Buffer"))

(dt/leader-keys
  "m b" '(:ignore t :wk "Tables")
  "m b -" '(org-table-insert-hline :wk "Insert hline in table"))

(dt/leader-keys
  "m d" '(:ignore t :wk "Date/deadline")
  "m d t" '(org-time-stamp :wk "Org time stamp"))


(dt/leader-keys
  "g" '(:ignore t :wk "Magit")
  "g g" '(magit :wk "Open Magit"))

(dt/leader-keys
  "p" '(projectile-command-map :wk "Projectile"))

  (dt/leader-keys
    "o" '(:ignore t :wk "Toggle")
    "o l" '(display-line-numbers-mode :wk "Toggle line numbers")
    "o n" '(neotree-toggle :wk "Toggle neotree file viewer")
    "o t" '(visual-line-mode :wk "Toggle truncated lines")
    "o v" '(vterm-toggle :wk "Toggle vterm"))

  (dt/leader-keys
    "j" '(:ignore t :wk "Jupyter")
    "j l" '(jupyter-server-launch-kernel :wk "Launch Kernels")
    "j s" '(jupyter-server-list-kernels :wk "List Kernels"))

  (dt/leader-keys
    "l" '(:ignore t :wk "LSP")
    "l d" '(lsp-ui-doc-glance :wk "Doc")
    "l c" '(comment-line :wk "Comment lines"))

  (dt/leader-keys
    "c" '(:ignore t :wk "Company")
    "c c" '(lsp-ui-doc-glance :wk "Complete"))

  (dt/leader-keys 
    "s" '(:ignore t :wk "Split")
    ;; Window splits
    "s c" '(evil-window-delete :wk "Close window")
    "s n" '(evil-window-new :wk "New window")
    "s h" '(evil-window-split :wk "Horizontal split window")
    "s v" '(evil-window-vsplit :wk "Vertical split window"))


  (dt/leader-keys
    "t" '(:ignore t :wk "Tab Bar")
    "t h" '(tab-bar-switch-to-prev-tab :wk "Tab left")
    "t l" '(tab-bar-switch-to-next-tab :wk "Tab right")
    "t c" '(tab-bar-close-tab :wl "Close Tabs"))

  (dt/leader-keys
    "w" '(:ignore t :wk "Windows")
    ;; Window motions
    "w h" '(evil-window-left :wk "Window left")
    "w j" '(evil-window-down :wk "Window down")
    "w k" '(evil-window-up :wk "Window up")
    "w l" '(evil-window-right :wk "Window right")
    "w w" '(evil-window-next :wk "Goto next window")
    ;; Move Windows
    "w H" '(buf-move-left :wk "Buffer move left")
    "w J" '(buf-move-down :wk "Buffer move down")
    "w K" '(buf-move-up :wk "Buffer move up")
    "w L" '(buf-move-right :wk "Buffer move right"))


(define-key evil-normal-state-map (kbd "C-h") #'evil-window-left)
(define-key evil-normal-state-map (kbd "C-j") #'evil-window-down)
(define-key evil-normal-state-map (kbd "C-k") #'evil-window-up)
(define-key evil-normal-state-map (kbd "C-l") #'evil-window-right)

)
#+end_src

* ALL THE ICONS
This is an icon set that can be used with dashboard, dired, ibuffer and other Emacs programs.
#+begin_src emacs-lisp
(use-package all-the-icons
  :ensure t
  :if (display-graphic-p))

(use-package all-the-icons-dired
  :hook (dired-mode . (lambda () (all-the-icons-dired-mode t))))
#+end_src

* FONTS

#+begin_src emacs-lisp
  (set-face-attribute 'default nil
    :font "SauceCodePro Nerd Font"
    :height 110
    :weight 'medium)
  (set-face-attribute 'variable-pitch nil
    :font "SauceCodePro Nerd Font"
    :height 120
    :weight 'medium)
  (set-face-attribute 'fixed-pitch nil
    :font "SauceCodePro Nerd Font"
    :height 110
    :weight 'medium)
  ;; Makes commented text and keywords italics.
  ;; This is working in emacsclient but not emacs.
  ;; Your font must have an italic face available.
  (set-face-attribute 'font-lock-comment-face nil
    :slant 'italic)
  (set-face-attribute 'font-lock-keyword-face nil
    :slant 'italic)

  ;; This sets the default font on all graphical frames created after restarting Emacs.
  ;; Does the same thing as 'set-face-attribute default' above, but emacsclient fonts
  ;; are not right unless I also add this method of setting the default font.
  (add-to-list 'default-frame-alist '(font . "SauceCodePro Nerd Font"))
  ;; Uncomment the following line if line spacing needs adjusting.
  (setq-default line-spacing 0.12)
  #+end_src

** Disable Menubar, Toolbars and Scrollbars
#+begin_src emacs-lisp
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)
#+end_src

** Display Line Numbers and Truncated Lines
#+begin_src emacs-lisp
(global-display-line-numbers-mode 1)
(global-visual-line-mode t)
#+end_src

* BUFFER-MOVE
Creating some functions to allow us to easily move windows (splits) around.  The following block of code was taken from buffer-move.el found on the EmacsWiki:

#+begin_src emacs-lisp
(require 'windmove)

;;;###autoload
(defun buf-move-up ()
  "Swap the current buffer and the buffer above the split.
If there is no split, ie now window above the current one, an
error is signaled."
;;  "Switches between the current buffer, and the buffer above the
;;  split, if possible."
  (interactive)
  (let* ((other-win (windmove-find-other-window 'up))
	 (buf-this-buf (window-buffer (selected-window))))
    (if (null other-win)
        (error "No window above this one")
      ;; swap top with this one
      (set-window-buffer (selected-window) (window-buffer other-win))
      ;; move this one to top
      (set-window-buffer other-win buf-this-buf)
      (select-window other-win))))

;;;###autoload
(defun buf-move-down ()
"Swap the current buffer and the buffer under the split.
If there is no split, ie now window under the current one, an
error is signaled."
  (interactive)
  (let* ((other-win (windmove-find-other-window 'down))
	 (buf-this-buf (window-buffer (selected-window))))
    (if (or (null other-win) 
            (string-match "^ \\*Minibuf" (buffer-name (window-buffer other-win))))
        (error "No window under this one")
      ;; swap top with this one
      (set-window-buffer (selected-window) (window-buffer other-win))
      ;; move this one to top
      (set-window-buffer other-win buf-this-buf)
      (select-window other-win))))

;;;###autoload
(defun buf-move-left ()
"Swap the current buffer and the buffer on the left of the split.
If there is no split, ie now window on the left of the current
one, an error is signaled."
  (interactive)
  (let* ((other-win (windmove-find-other-window 'left))
	 (buf-this-buf (window-buffer (selected-window))))
    (if (null other-win)
        (error "No left split")
      ;; swap top with this one
      (set-window-buffer (selected-window) (window-buffer other-win))
      ;; move this one to top
      (set-window-buffer other-win buf-this-buf)
      (select-window other-win))))

;;;###autoload
(defun buf-move-right ()
"Swap the current buffer and the buffer on the right of the split.
If there is no split, ie now window on the right of the current
one, an error is signaled."
  (interactive)
  (let* ((other-win (windmove-find-other-window 'right))
	 (buf-this-buf (window-buffer (selected-window))))
    (if (null other-win)
        (error "No right split")
      ;; swap top with this one
      (set-window-buffer (selected-window) (window-buffer other-win))
      ;; move this one to top
      (set-window-buffer other-win buf-this-buf)
      (select-window other-win))))
#+end_src

* COMPANY
#+begin_src emacs-lisp
(use-package company
  :defer 2
  :diminish
  :custom
  (company-begin-commands '(self-insert-command))
  (company-idle-delay .1)
  (company-minimum-prefix-length 2)
  (company-show-numbers t)
  (company-tooltip-align-annotations 't)
  (global-company-mode t))

(use-package company-box
  :after company
  :diminish
  :hook (company-mode . company-box-mode))
#+end_src

* DASHBOARD
#+begin_src emacs-lisp

(use-package dashboard
  :ensure t 
  :if (< (length command-line-args) 2)
  :init
  (setq initial-buffer-choice 'dashboard-open)
  (setq dashboard-set-heading-icons t)
  (setq dashboard-set-file-icons t)
  (setq dashboard-banner-logo-title "Emacs Is More Than A Text Editor!")
  (setq dashboard-startup-banner 'logo) ;; use standard emacs logo as banner
  (setq dashboard-center-content t) ;; set to 't' for centered content
  (setq dashboard-items '((recents . 5)
                          (projects . 3 )))
  :config
  (dashboard-setup-startup-hook))

#+end_src
* DIMINISH
Hide Extensions from Modeline
#+begin_src emacs-lisp
(use-package diminish)
#+end_src

* DIRED 
#+begin_src emacs-lisp
(use-package peep-dired
  :after dired
  :hook (evil-normalize-keymaps . peep-dired-hook)
  :config
    (evil-define-key 'normal dired-mode-map (kbd "h") 'dired-up-directory)
    (evil-define-key 'normal dired-mode-map (kbd "l") 'dired-find-file) ; use dired-find-file instead if not using dired-open package
    (evil-define-key 'normal peep-dired-mode-map (kbd "j") 'peep-dired-next-file)
    (evil-define-key 'normal peep-dired-mode-map (kbd "k") 'peep-dired-prev-file)
)

;;(add-hook 'peep-dired-hook 'evil-normalize-keymaps)
#+end_src

* EDITORCONFIG
#+begin_src emacs-lisp
(use-package editorconfig
  :ensure t
  :config
  (editorconfig-mode 1))
#+end_src

* ELFEED
#+begin_src emacs-lisp

(use-package elfeed
:ensure t
:config
(evil-define-key 'normal elfeed-show-mode-map
  (kbd "J") 'elfeed-goodies/split-show-next
  (kbd "K") 'elfeed-goodies/split-show-prev
  (kbd "L") 'elfeed-goodies/show-link-hint
  (kbd "H") 'elfeed-goodies/delete-pane)
(evil-define-key 'normal elfeed-search-mode-map
  (kbd "J") 'elfeed-goodies/split-show-next
  (kbd "K") 'elfeed-goodies/split-show-prev
  (kbd "L") 'elfeed-search-show-entry)
(setq elfeed-feeds (quote(
  ("https://www.heise.de/security/rss/news.rdf" heise security)
  ("https://www.heise.de/security/rss/alert-news.rdf" heise security alerts)
  ("https://www.reddit.com/r/linux.rss" reddit linux)
  ("https://www.reddit.com/r/linux.rss" reddit linux)
  ("https://www.reutersagency.com/feed/?taxonomy=best-topics&post_type=best" reuters news)))))

(use-package elfeed-goodies
:ensure t
:init
(elfeed-goodies/setup)
(setq elfeed-goodies/entry-pane-size 0.5)
)

#+end_src
* GRAPHICAL USER INTERFACE TWEAKS
Let's make GNU Emacs look a little better.

** Disable Menubar, Toolbars and Scrollbars
#+begin_src emacs-lisp
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)
#+end_src

** Display Line Numbers and Truncated Lines
#+begin_src emacs-lisp
  (setq display-line-numbers-type 'relative) 
  (global-display-line-numbers-mode 1)
  (global-visual-line-mode t)
#+end_src

** Disable Startup Screen
#+begin_src emacs-lisp
(setq inhibit-startup-message t) 
(setq initial-scratch-message nil)
#+end_src

* GIT-GUTTER
#+begin_src emacs-lisp
(use-package git-gutter
  :hook (prog-mode . git-gutter-mode)
  :config
  (setq git-gutter:update-interval 0.02))

(use-package git-gutter-fringe
  :config
  (define-fringe-bitmap 'git-gutter-fr:added [224] nil nil '(center repeated))
  (define-fringe-bitmap 'git-gutter-fr:modified [224] nil nil '(center repeated))
  (define-fringe-bitmap 'git-gutter-fr:deleted [128 192 224 240] nil nil 'bottom))

#+end_src
* IVY (COUNSEL)
+ Ivy, a generic completion mechanism for Emacs.
+ Counsel, a collection of Ivy-enhanced versions of common Emacs commands.
+ Ivy-rich allows us to add descriptions alongside the commands in M-x.

#+begin_src emacs-lisp
(use-package counsel
  :after ivy
  :diminish
  :config (counsel-mode))

(use-package ivy
  :bind
  ;; ivy-resume resumes the last Ivy-based completion.
  (("C-c C-r" . ivy-resume)
   ("C-x" . ivy-switch-buffer-kill)
   ("C-j" . ivy-next-line)
   ("C-k" . ivy-previous-line))
  :diminish
  :custom
  (setq ivy-use-virtual-buffers t)
  (setq ivy-count-format "(%d/%d) ")
  (setq enable-recursive-minibuffers t)
  :config
  (unbind-key "C-k" ivy-switch-buffer-map)
  (unbind-key "C-j" ivy-minibuffer-map)
  (ivy-mode 1))

(use-package all-the-icons-ivy-rich
  :ensure t
  :init (all-the-icons-ivy-rich-mode 1))

(use-package ivy-rich
  :after ivy
  :ensure t
  :init (ivy-rich-mode 1) ;; this gets us descriptions in M-x.
  :custom
  (ivy-virtual-abbreviate 'full
   ivy-rich-switch-buffer-align-virtual-buffer t
   ivy-rich-path-style 'abbrev)
)
#+end_src

* FLYCHECK
#+begin_src emacs-lisp
(use-package flycheck
  :ensure t
  :defer t
  :diminish
  :init (global-flycheck-mode))
#+end_src

* LANGUAGE SUPPORT
** LSP Mode
#+begin_src emacs-lisp
(use-package lsp-mode
  :init
  ;; set prefix for lsp-command-keymap (few alternatives - "C-l", "C-c l")
  (setq lsp-keymap-prefix "C-c l")
  :hook (;; replace XXX-mode with concrete major-mode(e. g. python-mode)
         (lsp-mode . lsp-enable-which-key-integration))
  :commands lsp)

(use-package lsp-ui)
#+end_src

*** Python
#+begin_src emacs-lisp 

  (use-package lsp-pyright
    :ensure t
    :hook (python-mode . (lambda ()
			    (require 'lsp-pyright)
			    (lsp))))  ; or lsp-deferred

#+end_src

*** Jupyter
#+begin_src emacs-lisp
(use-package jupyter
:demand t
:after ob  ;; or maybe `:after org` would be sufficient
:config
  (add-to-list 'org-babel-load-languages '(jupyter . t))
  (org-babel-do-load-languages 'org-babel-load-languages org-babel-load-languages))

(setq comp-deferred-compilation-deny-list (list "jupyter"))
(setq jupyter-use-zmq nil)
#+end_src

*** Go
#+begin_src emacs-lisp
(use-package go-mode)
(add-hook 'go-mode-hook #'lsp-deferred)
#+end_src

*** Terraform
#+begin_src emacs-lisp
(use-package terraform-mode)

(use-package company-terraform
:init
(company-terraform-init))
#+end_src

*** Javascript 
**** VueJS
#+begin_src emacs-lisp
(use-package vue-mode
:init
(vue-mode))
#+end_src

*** YAML
#+begin_src emacs-lisp
(use-package yaml-mode
:init
(add-to-list 'auto-mode-alist '("\\.yml\\'" . yaml-mode))
)
#+end_src

*** DOCKER
#+begin_src emacs-lisp
(use-package dockerfile-mode)
#+end_src
* MAGIT
#+begin_src emacs-lisp
(use-package magit)
#+end_src

* NEOTREE
#+begin_src emacs-lisp
(use-package neotree
  :config
  (setq neo-smart-open t
        neo-show-hidden-files t
        neo-window-width 35
        neo-window-fixed-size nil
        neo-window-position (quote right)
        inhibit-compacting-font-caches t
        projectile-switch-project-action 'neotree-projectile-action) 
        ;; truncate long file names in neotree
        (add-hook 'neo-after-create-hook
           #'(lambda (_)
               (with-current-buffer (get-buffer neo-buffer-name)
                 (setq truncate-lines t)
                 (setq word-wrap nil)
                 (make-local-variable 'auto-hscroll-mode)
                 (setq auto-hscroll-mode nil)))))

;; show hidden files
#+end_src

* NIX Utils
#+begin_src emacs-lisp
(use-package nix-mode
  :mode ("\\.nix\\'" "\\.nix.in\\'"))

(use-package company-nixos-options
  :ensure t
  :init (add-to-list 'company-backends 'company-nixos-options)
)
#+end_src

** Direnv
#+begin_src emacs-lisp
(use-package direnv
 :config
 (direnv-mode))
#+end_src

* ORG MODE
** Enabling Table of Contents
#+begin_src emacs-lisp
  (use-package toc-org
      :commands toc-org-enable
      :init (add-hook 'org-mode-hook 'toc-org-enable))
#+end_src

** Enabling Org Bullets
Org-bullets gives us attractive bullets rather than asterisks.

#+begin_src emacs-lisp
  (add-hook 'org-mode-hook 'org-indent-mode)
  (use-package org-bullets)
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
#+end_src

** Disable Electric Indent
Org mode source blocks have some really weird and annoying default indentation behavior.  I think this has to do with electric-indent-mode, which is turned on by default in Emacs.  So let's turn it OFF!

#+begin_src emacs-lisp
  (electric-indent-mode -1)
(setq org-edit-src-content-indentation 0)
#+end_src

** Source Code Block Tag Expansion
Org-tempo is not a separate package but a module within org that can be enabled.  Org-tempo allows for '<s' followed by TAB to expand to a begin_src tag.  Other expansions available include:

| Typing the below + TAB | Expands to ...                          |
|------------------------+-----------------------------------------|
| <a                     | '#+BEGIN_EXPORT ascii' … '#+END_EXPORT  |
| <c                     | '#+BEGIN_CENTER' … '#+END_CENTER'       |
| <C                     | '#+BEGIN_COMMENT' … '#+END_COMMENT'     |
| <e                     | '#+BEGIN_EXAMPLE' … '#+END_EXAMPLE'     |
| <E                     | '#+BEGIN_EXPORT' … '#+END_EXPORT'       |
| <h                     | '#+BEGIN_EXPORT html' … '#+END_EXPORT'  |
| <l                     | '#+BEGIN_EXPORT latex' … '#+END_EXPORT' |
| <q                     | '#+BEGIN_QUOTE' … '#+END_QUOTE'         |
| <s                     | '#+BEGIN_SRC' … '#+END_SRC'             |
| <v                     | '#+BEGIN_VERSE' … '#+END_VERSE'         |



#+begin_src emacs-lisp 
(require 'org-tempo)
(add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
(add-to-list 'org-structure-template-alist '("j" . "src jupyter-python :session py"))
#+end_src

** Org Babel
#+begin_src emacs-lisp
(setq org-image-actual-width t)
(setq org-confirm-babel-evaluate nil)
(require 'ob-python)
#+end_src

* SUDO EDIT
[[https://github.com/nflath/sudo-edit][sudo-edit]] gives us the ability to open files with sudo privileges or switch over to editing with sudo privileges if we initially opened the file without such privileges.

#+begin_src emacs-lisp
(use-package sudo-edit
  :config
    (dt/leader-keys
      "fu" '(sudo-edit-find-file :wk "Sudo find file")
      "fU" '(sudo-edit :wk "Sudo edit file")))
#+end_src

* RELOAD EMACS
This is just an example of how to create a simple function in Emacs.  Use this function to reload Emacs after adding changes to the config.  Yes, I am loading the user-init-file twice in this function, which is a hack because for some reason, just loading the user-init-file once does not work properly.

#+begin_src emacs-lisp
(defun reload-init-file ()
  (interactive)
  (load-file user-init-file))
#+end_src

* RESTCLIENT

#+begin_src emacs-lisp
(use-package restclient
  :ensure t
  :config
  (remove-hook 'restclient-mode-hook 'restclient-outline-mode)
  (restclient-mode)
)
(add-to-list 'auto-mode-alist '("\\.http\\'" . restclient-mode))
#+end_src
* PROJECTILE
#+begin_src emacs-lisp
  (use-package projectile
    :diminish
    :config
    (projectile-mode 1))
#+end_src

* SHELLS AND TERMINALS
** Vterm
Vterm is a terminal emulator within Emacs.  The 'shell-file-name' setting sets the shell to be used in M-x shell, M-x term, M-x ansi-term and M-x vterm.  By default, the shell is set to 'fish' but could change it to 'bash' or 'zsh' if you prefer.

#+begin_src emacs-lisp
(use-package vterm
:config
(setq shell-file-name "/bin/sh"
      vterm-max-scrollback 5000))
#+end_src

** Vterm-Toggle 
[[https://github.com/jixiuf/vterm-toggle][vterm-toggle]] toggles between the vterm buffer and whatever buffer you are editing.

#+begin_src emacs-lisp
(use-package vterm-toggle
  :after vterm
  :config
  (setq vterm-toggle-fullscreen-p nil)
  (setq vterm-toggle-scope 'project)
  (add-to-list 'display-buffer-alist
               '((lambda (buffer-or-name _)
                     (let ((buffer (get-buffer buffer-or-name)))
                       (with-current-buffer buffer
                         (or (equal major-mode 'vterm-mode)
                             (string-prefix-p vterm-buffer-name (buffer-name buffer))))))
                  (display-buffer-reuse-window display-buffer-at-bottom)
                  ;;(display-buffer-reuse-window display-buffer-in-direction)
                  ;;display-buffer-in-direction/direction/dedicated is added in emacs27
                  ;;(direction . bottom)
                  ;;(dedicated . t) ;dedicated is supported in emacs27
                  (reusable-frames . visible)
                  (window-height . 0.3))))
#+end_src

* TAB BAR
#+begin_src emacs-lisp
(tab-bar-mode 1)                           ;; enable tab bar
(setq tab-bar-show 1)                      ;; hide bar if <= 1 tabs open
(setq tab-bar-close-button-show nil)       ;; hide tab close / X button
(setq tab-bar-new-tab-choice "*scratch*");; buffer to show in new tabs
(setq tab-bar-tab-hints t)                 ;; show tab numbers
(setq tab-bar-format '(tab-bar-format-tabs tab-bar-separator))
(setq tab-bar-tab-name-function #'my/name-tab-by-project-or-default)

#+end_src

** Tab Numbering
#+begin_src emacs-lisp
(defvar ct/circle-numbers-alist
  '((1 . "󰎡")
    (1 . "󰎤")
    (2 . "󰎧")
    (3 . "󰎪")
    (4 . "󰎭")
    (5 . "󰎱")
    (6 . "󰎳")
    (7 . "󰎶")
    (8 . "󰎹")
    (9 . "󰎼"))
  "Alist of integers to strings of circled unicode numbers.")

#+end_src
** Tab Name Function
#+begin_src emacs-lisp
 (defun my/name-tab-by-project-or-default ()
   "Return project name if in a project, or default tab-bar name if not.
 The default tab-bar name uses the buffer name."
   (let ((project-name (projectile-project-name)))
     (if (string= "-" project-name)
         (tab-bar-tab-name-current)
       (projectile-project-name))))
#+end_src

#+begin_src emacs-lisp
(defun ct/tab-bar-tab-name-format-default (tab i)
  (let ((current-p (eq (car tab) 'current-tab))
        (tab-num (if (and tab-bar-tab-hints (< i 10))
                     (alist-get i ct/circle-numbers-alist) "")))
    (propertize
     (concat "▎ "
             tab-num
             " "
             (alist-get 'name tab)
             (or (and tab-bar-close-button-show
                      (not (eq tab-bar-close-button-show
                               (if current-p 'non-selected 'selected)))
                      tab-bar-close-button)
                 "")
             " ")
     'face (funcall tab-bar-tab-face-function tab))))
(setq tab-bar-tab-name-format-function #'ct/tab-bar-tab-name-format-default)

#+end_src

* THEME 
#+begin_src emacs-lisp
(use-package doom-themes
  :ensure t
  :config
  ;; Global settings (defaults)
  (setq doom-themes-enable-bold t
        doom-themes-enable-italic t
        doom-themes-neotree-file-icons t)
  (load-theme 'doom-one t)

  ;; Enable flashing mode-line on errors
  (doom-themes-visual-bell-config)
  ;; Enable custom neotree theme (all-the-icons must be installed!)
  (doom-themes-neotree-config)
  ;; or for treemacs users
  (setq doom-themes-treemacs-theme "doom-atom") ; use "doom-colors" for less minimal icon theme
  (doom-themes-treemacs-config)
  ;; Corrects (and improves) org-mode's native fontification.
  (doom-themes-org-config))
#+end_src

** Transparency
#+begin_src emacs-lisp
(set-frame-parameter nil 'alpha-background 95)

(add-to-list 'default-frame-alist '(alpha-background . 95)) ; For all new frames henceforth
#+end_src

** Mode Line
#+begin_src emacs-lisp
(use-package doom-modeline
  :ensure t
  :config
  (setq doom-modeline-major-mode-color-icon t)
  (setq doom-modeline-modal-icon nil)
  (setq doom-modeline-buffer-state-icon nil)
  :init (doom-modeline-mode 1)
)

(setq evil-normal-state-tag   (propertize "" 'face '((:background "green" :foreground "black")))
      evil-emacs-state-tag    (propertize "" 'face '((:background "orange" :foreground "black")))
      evil-insert-state-tag   (propertize "" 'face '((:background "red") :foreground "white"))
      evil-motion-state-tag   (propertize "" 'face '((:background "blue") :foreground "white"))
      evil-visual-state-tag   (propertize "" 'face '((:background "grey80" :foreground "black")))
      evil-operator-state-tag (propertize "" 'face '((:background "purple"))))

#+end_src

** Tab Bar 
#+begin_src emacs-lisp
(custom-set-faces
  `(tab-bar ((t (:height 1.2))))
  `(tab-bar-bar ((t (:foreground "61afef")))))
#+end_src
* RAINBOW MODE 
#+begin_src emacs-elisp
(use-package rainbow-mode
  :diminish
  :hook org-mode prog-mode)
#+end_src

* WHICH-KEY
#+begin_src emacs-lisp
  (use-package which-key
    :init
      (which-key-mode 1)
    :diminish
    :config
    (setq which-key-side-window-location 'bottom
          which-key-sort-order #'which-key-key-order-alpha
          which-key-sort-uppercase-first nil
          which-key-add-column-padding 1
          which-key-max-display-columns nil
          which-key-min-display-lines 6
          which-key-side-window-slot -10
          which-key-side-window-max-height 0.25
          which-key-idle-delay 0.8
          which-key-max-description-length 25
          which-key-allow-imprecise-window-fit t
          which-key-separator " → " 
          which-key-allow-imprecise-window-fit nil ))


#+end_src

* EVIL-COLLECTION

#+begin_src emacs-lisp
(use-package evil-collection
:after evil
:config
(setq evil-collection-mode-list '(dashboard dired ibuffer ivy company neotree magit elfeed eww))
(evil-collection-init))
#+end_src

